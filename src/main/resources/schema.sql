DROP TABLE IF EXISTS film_likes;
DROP TABLE IF EXISTS friendships;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS film_likes;
DROP TABLE IF EXISTS film_genres;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS mpa_ratings;
DROP TABLE IF EXISTS genres;



CREATE TABLE users
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(50) NOT NULL CHECK (LENGTH(TRIM(email)) > 0),
    login    VARCHAR(20) UNIQUE NOT NULL CHECK (LENGTH(TRIM(login)) > 0),
    name     VARCHAR(30),
    birthday DATE
);

CREATE TABLE mpa_ratings
(
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(20) UNIQUE NOT NULL CHECK (LENGTH(TRIM(name)) > 0)
);

CREATE TABLE films
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL CHECK (LENGTH(TRIM(name)) > 0),
    description VARCHAR(200),
    release_date DATE CHECK (release_date >= DATE '1895-12-28'),
    duration INT CHECK (duration > 0),
    likes BIGINT DEFAULT 0,
    mpa_rating_id SMALLINT NOT NULL REFERENCES mpa_ratings(id) ON DELETE RESTRICT
);

CREATE TABLE genres
(
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(20) UNIQUE NOT NULL CHECK (LENGTH(TRIM(name)) > 0)
);

CREATE TABLE film_genres (
    film_id  BIGINT  NOT NULL REFERENCES films(id)   ON DELETE CASCADE,
    genre_id SMALLINT NOT NULL REFERENCES genres(id)  ON DELETE RESTRICT,
    PRIMARY KEY (film_id, genre_id)
);
CREATE INDEX idx_film_genres_genre ON film_genres (genre_id);

CREATE TABLE film_likes
(
    film_id BIGINT NOT NULL REFERENCES films(id) ON DELETE CASCADE,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP NOT NULL DEFAULT now(),
    PRIMARY KEY (film_id, user_id)
);
CREATE INDEX idx_film_likes_film  ON film_likes (film_id);
CREATE INDEX idx_film_likes_user  ON film_likes (user_id);

CREATE TABLE friendships (
  user1_id       BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  user2_id       BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  requested_by_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  status         VARCHAR NOT NULL,
  CHECK (requested_by_id = user1_id OR requested_by_id = user2_id),
  PRIMARY KEY (user1_id, user2_id)
);
CREATE INDEX idx_friendships_user1 ON friendships (user1_id);
CREATE INDEX idx_friendships_user2 ON friendships (user2_id);